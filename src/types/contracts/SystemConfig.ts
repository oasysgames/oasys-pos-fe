/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace ResourceMetering {
  export type ResourceConfigStruct = {
    maxResourceLimit: BigNumberish;
    elasticityMultiplier: BigNumberish;
    baseFeeMaxChangeDenominator: BigNumberish;
    minimumBaseFee: BigNumberish;
    systemTxMaxGas: BigNumberish;
    maximumBaseFee: BigNumberish;
  };

  export type ResourceConfigStructOutput = [
    number,
    number,
    number,
    number,
    number,
    BigNumber
  ] & {
    maxResourceLimit: number;
    elasticityMultiplier: number;
    baseFeeMaxChangeDenominator: number;
    minimumBaseFee: number;
    systemTxMaxGas: number;
    maximumBaseFee: BigNumber;
  };
}

export interface SystemConfigInterface extends utils.Interface {
  functions: {
    "UNSAFE_BLOCK_SIGNER_SLOT()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "batcherHash()": FunctionFragment;
    "gasLimit()": FunctionFragment;
    "initialize(address,uint256,uint256,bytes32,uint64,address,(uint32,uint8,uint8,uint32,uint32,uint128))": FunctionFragment;
    "minimumGasLimit()": FunctionFragment;
    "overhead()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resourceConfig()": FunctionFragment;
    "scalar()": FunctionFragment;
    "setBatcherHash(bytes32)": FunctionFragment;
    "setGasConfig(uint256,uint256)": FunctionFragment;
    "setGasLimit(uint64)": FunctionFragment;
    "setResourceConfig((uint32,uint8,uint8,uint32,uint32,uint128))": FunctionFragment;
    "setUnsafeBlockSigner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unsafeBlockSigner()": FunctionFragment;
    "version()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UNSAFE_BLOCK_SIGNER_SLOT"
      | "VERSION"
      | "batcherHash"
      | "gasLimit"
      | "initialize"
      | "minimumGasLimit"
      | "overhead"
      | "owner"
      | "renounceOwnership"
      | "resourceConfig"
      | "scalar"
      | "setBatcherHash"
      | "setGasConfig"
      | "setGasLimit"
      | "setResourceConfig"
      | "setUnsafeBlockSigner"
      | "transferOwnership"
      | "unsafeBlockSigner"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UNSAFE_BLOCK_SIGNER_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batcherHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasLimit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      string,
      ResourceMetering.ResourceConfigStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "overhead", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resourceConfig",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scalar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBatcherHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasConfig",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGasLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResourceConfig",
    values: [ResourceMetering.ResourceConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnsafeBlockSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unsafeBlockSigner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "UNSAFE_BLOCK_SIGNER_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batcherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gasLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minimumGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "overhead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resourceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scalar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBatcherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setResourceConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnsafeBlockSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsafeBlockSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "ConfigUpdate(uint256,uint8,bytes)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ConfigUpdateEventObject {
  version: BigNumber;
  updateType: number;
  data: string;
}
export type ConfigUpdateEvent = TypedEvent<
  [BigNumber, number, string],
  ConfigUpdateEventObject
>;

export type ConfigUpdateEventFilter = TypedEventFilter<ConfigUpdateEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SystemConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SystemConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _owner: string,
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.
     */
    overhead(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(
      overrides?: CallOverrides
    ): Promise<[ResourceMetering.ResourceConfigStructOutput]>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.
     */
    scalar(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Updates gas config. Can only be called by the owner.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setResourceConfig(
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(
      overrides?: CallOverrides
    ): Promise<[string] & { addr_: string }>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<[string]>;
  };

  /**
   * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
   */
  UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<string>;

  /**
   * Version identifier, used for upgrades.
   */
  VERSION(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
   */
  batcherHash(overrides?: CallOverrides): Promise<string>;

  /**
   * L2 block gas limit.
   */
  gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _owner: string,
    _overhead: BigNumberish,
    _scalar: BigNumberish,
    _batcherHash: BytesLike,
    _gasLimit: BigNumberish,
    _unsafeBlockSigner: string,
    _config: ResourceMetering.ResourceConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
   */
  minimumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Fixed L2 gas overhead. Used as part of the L2 fee calculation.
   */
  overhead(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
   */
  resourceConfig(
    overrides?: CallOverrides
  ): Promise<ResourceMetering.ResourceConfigStructOutput>;

  /**
   * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.
   */
  scalar(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Updates the batcher hash. Can only be called by the owner.
   * @param _batcherHash New batcher hash.
   */
  setBatcherHash(
    _batcherHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Updates gas config. Can only be called by the owner.
   * @param _overhead New overhead value.
   * @param _scalar New scalar value.
   */
  setGasConfig(
    _overhead: BigNumberish,
    _scalar: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Updates the L2 gas limit. Can only be called by the owner.
   * @param _gasLimit New gas limit.
   */
  setGasLimit(
    _gasLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setResourceConfig(
    _config: ResourceMetering.ResourceConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Updates the unsafe block signer address. Can only be called by the owner.
   * @param _unsafeBlockSigner New unsafe block signer address.
   */
  setUnsafeBlockSigner(
    _unsafeBlockSigner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
   */
  unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;

  /**
   * Semantic version.
   */
  version(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<string>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<string>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.
     */
    overhead(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(
      overrides?: CallOverrides
    ): Promise<ResourceMetering.ResourceConfigStructOutput>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.
     */
    scalar(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates gas config. Can only be called by the owner.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setResourceConfig(
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(overrides?: CallOverrides): Promise<string>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ConfigUpdate(uint256,uint8,bytes)"(
      version?: BigNumberish | null,
      updateType?: BigNumberish | null,
      data?: null
    ): ConfigUpdateEventFilter;
    ConfigUpdate(
      version?: BigNumberish | null,
      updateType?: BigNumberish | null,
      data?: null
    ): ConfigUpdateEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: string,
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.
     */
    overhead(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.
     */
    scalar(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Updates gas config. Can only be called by the owner.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setResourceConfig(
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Storage slot that the unsafe block signer is stored at.         Storing it at this deterministic storage slot allows for decoupling the storage         layout from the way that `solc` lays out storage. The `op-node` uses a storage         proof to fetch this value.
     */
    UNSAFE_BLOCK_SIGNER_SLOT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Version identifier, used for upgrades.
     */
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Identifier for the batcher.         For version 1 of this configuration, this is represented as an address left-padded         with zeros to 32 bytes.
     */
    batcherHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * L2 block gas limit.
     */
    gasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      _batcherHash: BytesLike,
      _gasLimit: BigNumberish,
      _unsafeBlockSigner: string,
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the minimum L2 gas limit that can be safely set for the system to         operate. The L2 gas limit must be larger than or equal to the amount of         gas that is allocated for deposits per block plus the amount of gas that         is allocated for the system transaction.         This function is used to determine if changes to parameters are safe.
     */
    minimumGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Fixed L2 gas overhead. Used as part of the L2 fee calculation.
     */
    overhead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * A getter for the resource config.         Ensures that the struct is returned instead of a tuple.
     */
    resourceConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Dynamic L2 gas overhead. Used as part of the L2 fee calculation.
     */
    scalar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Updates the batcher hash. Can only be called by the owner.
     * @param _batcherHash New batcher hash.
     */
    setBatcherHash(
      _batcherHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates gas config. Can only be called by the owner.
     * @param _overhead New overhead value.
     * @param _scalar New scalar value.
     */
    setGasConfig(
      _overhead: BigNumberish,
      _scalar: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the L2 gas limit. Can only be called by the owner.
     * @param _gasLimit New gas limit.
     */
    setGasLimit(
      _gasLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setResourceConfig(
      _config: ResourceMetering.ResourceConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the unsafe block signer address. Can only be called by the owner.
     * @param _unsafeBlockSigner New unsafe block signer address.
     */
    setUnsafeBlockSigner(
      _unsafeBlockSigner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * High level getter for the unsafe block signer address.         Unsafe blocks can be propagated across the p2p network if they are signed by the         key corresponding to this address.
     */
    unsafeBlockSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Semantic version.
     */
    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
