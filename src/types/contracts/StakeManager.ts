/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StakeManagerInterface extends utils.Interface {
  functions: {
    "activateValidator(address,uint256[])": FunctionFragment;
    "addRewardBalance()": FunctionFragment;
    "allowlist()": FunctionFragment;
    "blsPublicKeyToOwner(bytes32)": FunctionFragment;
    "candidateManager()": FunctionFragment;
    "claimCommissions(address,uint256)": FunctionFragment;
    "claimLockedUnstake(uint256)": FunctionFragment;
    "claimRewards(address,address,uint256)": FunctionFragment;
    "claimUnstakes(address)": FunctionFragment;
    "deactivateValidator(address,uint256[])": FunctionFragment;
    "environment()": FunctionFragment;
    "getBlockAndSlashes(address,uint256)": FunctionFragment;
    "getCommissions(address,uint256)": FunctionFragment;
    "getLockedUnstake(address,uint256)": FunctionFragment;
    "getLockedUnstakeCount(address)": FunctionFragment;
    "getLockedUnstakes(address,uint256,uint256)": FunctionFragment;
    "getOperatorStakes(address,uint256)": FunctionFragment;
    "getRewards(address,address,uint256)": FunctionFragment;
    "getStakerStakes(address,uint256,uint256,uint256)": FunctionFragment;
    "getStakers(uint256,uint256)": FunctionFragment;
    "getTotalRewards(address[],uint256)": FunctionFragment;
    "getTotalStake(uint256)": FunctionFragment;
    "getUnstakes(address)": FunctionFragment;
    "getValidatorInfo(address,uint256)": FunctionFragment;
    "getValidatorOwners(uint256,uint256)": FunctionFragment;
    "getValidatorStakes(address,uint256)": FunctionFragment;
    "getValidatorStakes(address,uint256,uint256,uint256)": FunctionFragment;
    "getValidators(uint256,uint256,uint256)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "jail(address,address,bytes,uint256)": FunctionFragment;
    "jailCallers(address)": FunctionFragment;
    "joinValidator(address)": FunctionFragment;
    "operatorToOwner(address)": FunctionFragment;
    "restakeCommissions(uint256)": FunctionFragment;
    "restakeRewards(address,uint256)": FunctionFragment;
    "slash(address,uint256)": FunctionFragment;
    "stake(address,uint8,uint256)": FunctionFragment;
    "stakeAmounts(uint256)": FunctionFragment;
    "stakeUpdates(uint256)": FunctionFragment;
    "stakerSigners(uint256)": FunctionFragment;
    "stakers(address)": FunctionFragment;
    "unstake(address,uint8,uint256)": FunctionFragment;
    "unstakeV2(address,uint8,uint256)": FunctionFragment;
    "updateBLSPublicKey(bytes)": FunctionFragment;
    "updateOperator(address)": FunctionFragment;
    "validatorOwners(uint256)": FunctionFragment;
    "validators(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateValidator"
      | "addRewardBalance"
      | "allowlist"
      | "blsPublicKeyToOwner"
      | "candidateManager"
      | "claimCommissions"
      | "claimLockedUnstake"
      | "claimRewards"
      | "claimUnstakes"
      | "deactivateValidator"
      | "environment"
      | "getBlockAndSlashes"
      | "getCommissions"
      | "getLockedUnstake"
      | "getLockedUnstakeCount"
      | "getLockedUnstakes"
      | "getOperatorStakes"
      | "getRewards"
      | "getStakerStakes"
      | "getStakers"
      | "getTotalRewards"
      | "getTotalStake"
      | "getUnstakes"
      | "getValidatorInfo"
      | "getValidatorOwners"
      | "getValidatorStakes(address,uint256)"
      | "getValidatorStakes(address,uint256,uint256,uint256)"
      | "getValidators"
      | "initialize"
      | "initialized"
      | "jail"
      | "jailCallers"
      | "joinValidator"
      | "operatorToOwner"
      | "restakeCommissions"
      | "restakeRewards"
      | "slash"
      | "stake"
      | "stakeAmounts"
      | "stakeUpdates"
      | "stakerSigners"
      | "stakers"
      | "unstake"
      | "unstakeV2"
      | "updateBLSPublicKey"
      | "updateOperator"
      | "validatorOwners"
      | "validators"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateValidator",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allowlist", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blsPublicKeyToOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "candidateManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCommissions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimLockedUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimUnstakes",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateValidator",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "environment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockAndSlashes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCommissions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedUnstake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedUnstakeCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedUnstakes",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorStakes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewards",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerStakes",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalRewards",
    values: [string[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUnstakes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getValidatorInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorOwners",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorStakes(address,uint256)",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorStakes(address,uint256,uint256,uint256)",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jail",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jailCallers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "joinValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorToOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "restakeCommissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "restakeRewards",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAmounts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeUpdates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerSigners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stakers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeV2",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBLSPublicKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorOwners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "validators", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "activateValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowlist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blsPublicKeyToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "candidateManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCommissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimLockedUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimUnstakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "environment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockAndSlashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCommissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedUnstakeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedUnstakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakerStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorStakes(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorStakes(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jail", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jailCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restakeCommissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restakeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBLSPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;

  events: {
    "AddedRewardBalance(uint256)": EventFragment;
    "BLSPublicKeyUpdated(address,bytes,bytes)": EventFragment;
    "ClaimedCommissions(address,uint256)": EventFragment;
    "ClaimedLockedUnstake(address,uint256)": EventFragment;
    "ClaimedRewards(address,address,uint256)": EventFragment;
    "OperatorUpdated(address,address,address)": EventFragment;
    "ReStaked(address,address,uint256)": EventFragment;
    "Staked(address,address,uint8,uint256)": EventFragment;
    "Unstaked(address,address,uint8,uint256)": EventFragment;
    "UnstakedV2(address,address,uint256)": EventFragment;
    "ValidatorActivated(address,uint256[])": EventFragment;
    "ValidatorDeactivated(address,uint256[])": EventFragment;
    "ValidatorJailed(address,uint256)": EventFragment;
    "ValidatorJoined(address)": EventFragment;
    "ValidatorSlashed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedRewardBalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BLSPublicKeyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedCommissions"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedLockedUnstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimedRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OperatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnstakedV2"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorJailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorSlashed"): EventFragment;
}

export interface AddedRewardBalanceEventObject {
  amount: BigNumber;
}
export type AddedRewardBalanceEvent = TypedEvent<
  [BigNumber],
  AddedRewardBalanceEventObject
>;

export type AddedRewardBalanceEventFilter =
  TypedEventFilter<AddedRewardBalanceEvent>;

export interface BLSPublicKeyUpdatedEventObject {
  validator: string;
  oldBLSPublicKey: string;
  newBLSPublicKey: string;
}
export type BLSPublicKeyUpdatedEvent = TypedEvent<
  [string, string, string],
  BLSPublicKeyUpdatedEventObject
>;

export type BLSPublicKeyUpdatedEventFilter =
  TypedEventFilter<BLSPublicKeyUpdatedEvent>;

export interface ClaimedCommissionsEventObject {
  validator: string;
  amount: BigNumber;
}
export type ClaimedCommissionsEvent = TypedEvent<
  [string, BigNumber],
  ClaimedCommissionsEventObject
>;

export type ClaimedCommissionsEventFilter =
  TypedEventFilter<ClaimedCommissionsEvent>;

export interface ClaimedLockedUnstakeEventObject {
  staker: string;
  lockedUnstake: BigNumber;
}
export type ClaimedLockedUnstakeEvent = TypedEvent<
  [string, BigNumber],
  ClaimedLockedUnstakeEventObject
>;

export type ClaimedLockedUnstakeEventFilter =
  TypedEventFilter<ClaimedLockedUnstakeEvent>;

export interface ClaimedRewardsEventObject {
  staker: string;
  validator: string;
  amount: BigNumber;
}
export type ClaimedRewardsEvent = TypedEvent<
  [string, string, BigNumber],
  ClaimedRewardsEventObject
>;

export type ClaimedRewardsEventFilter = TypedEventFilter<ClaimedRewardsEvent>;

export interface OperatorUpdatedEventObject {
  validator: string;
  oldOperator: string;
  newOperator: string;
}
export type OperatorUpdatedEvent = TypedEvent<
  [string, string, string],
  OperatorUpdatedEventObject
>;

export type OperatorUpdatedEventFilter = TypedEventFilter<OperatorUpdatedEvent>;

export interface ReStakedEventObject {
  staker: string;
  validator: string;
  amount: BigNumber;
}
export type ReStakedEvent = TypedEvent<
  [string, string, BigNumber],
  ReStakedEventObject
>;

export type ReStakedEventFilter = TypedEventFilter<ReStakedEvent>;

export interface StakedEventObject {
  staker: string;
  validator: string;
  token: number;
  amount: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, string, number, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnstakedEventObject {
  staker: string;
  validator: string;
  token: number;
  amount: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, string, number, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface UnstakedV2EventObject {
  staker: string;
  validator: string;
  lockedUnstake: BigNumber;
}
export type UnstakedV2Event = TypedEvent<
  [string, string, BigNumber],
  UnstakedV2EventObject
>;

export type UnstakedV2EventFilter = TypedEventFilter<UnstakedV2Event>;

export interface ValidatorActivatedEventObject {
  validator: string;
  epochs: BigNumber[];
}
export type ValidatorActivatedEvent = TypedEvent<
  [string, BigNumber[]],
  ValidatorActivatedEventObject
>;

export type ValidatorActivatedEventFilter =
  TypedEventFilter<ValidatorActivatedEvent>;

export interface ValidatorDeactivatedEventObject {
  validator: string;
  epochs: BigNumber[];
}
export type ValidatorDeactivatedEvent = TypedEvent<
  [string, BigNumber[]],
  ValidatorDeactivatedEventObject
>;

export type ValidatorDeactivatedEventFilter =
  TypedEventFilter<ValidatorDeactivatedEvent>;

export interface ValidatorJailedEventObject {
  validator: string;
  until: BigNumber;
}
export type ValidatorJailedEvent = TypedEvent<
  [string, BigNumber],
  ValidatorJailedEventObject
>;

export type ValidatorJailedEventFilter = TypedEventFilter<ValidatorJailedEvent>;

export interface ValidatorJoinedEventObject {
  validator: string;
}
export type ValidatorJoinedEvent = TypedEvent<
  [string],
  ValidatorJoinedEventObject
>;

export type ValidatorJoinedEventFilter = TypedEventFilter<ValidatorJoinedEvent>;

export interface ValidatorSlashedEventObject {
  validator: string;
}
export type ValidatorSlashedEvent = TypedEvent<
  [string],
  ValidatorSlashedEventObject
>;

export type ValidatorSlashedEventFilter =
  TypedEventFilter<ValidatorSlashedEvent>;

export interface StakeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addRewardBalance(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowlist(overrides?: CallOverrides): Promise<[string]>;

    blsPublicKeyToOwner(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    candidateManager(overrides?: CallOverrides): Promise<[string]>;

    claimCommissions(
      arg0: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimLockedUnstake(
      lockedUnstake: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimRewards(
      arg0: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimUnstakes(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deactivateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    environment(overrides?: CallOverrides): Promise<[string]>;

    getBlockAndSlashes(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blocks: BigNumber; slashes: BigNumber }
    >;

    getCommissions(
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { commissions: BigNumber }>;

    getLockedUnstake(
      staker: string,
      lockedUnstake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, boolean] & {
        token: number;
        amount: BigNumber;
        unlockTime: BigNumber;
        claimable: boolean;
      }
    >;

    getLockedUnstakeCount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getLockedUnstakes(
      staker: string,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber[], BigNumber[], boolean[], BigNumber] & {
        tokens: number[];
        amounts: BigNumber[];
        unlockTimes: BigNumber[];
        claimable: boolean[];
        newCursor: BigNumber;
      }
    >;

    getOperatorStakes(
      operator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakes: BigNumber }>;

    getRewards(
      staker: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    getStakerStakes(
      staker: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber] & {
        _validators: string[];
        oasStakes: BigNumber[];
        woasStakes: BigNumber[];
        soasStakes: BigNumber[];
        newCursor: BigNumber;
      }
    >;

    getStakers(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { _stakers: string[]; newCursor: BigNumber }
    >;

    getTotalRewards(
      _validators: string[],
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { rewards: BigNumber }>;

    getTotalStake(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amounts: BigNumber }>;

    getUnstakes(
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        oasUnstakes: BigNumber;
        woasUnstakes: BigNumber;
        soasUnstakes: BigNumber;
      }
    >;

    getValidatorInfo(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, boolean, BigNumber, string] & {
        operator: string;
        active: boolean;
        jailed: boolean;
        candidate: boolean;
        stakes: BigNumber;
        blsPublicKey: string;
      }
    >;

    getValidatorOwners(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { owners: string[]; newCursor: BigNumber }
    >;

    "getValidatorStakes(address,uint256)"(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stakes: BigNumber }>;

    "getValidatorStakes(address,uint256,uint256,uint256)"(
      validator: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber] & {
        _stakers: string[];
        stakes: BigNumber[];
        newCursor: BigNumber;
      }
    >;

    getValidators(
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], string[], boolean[], BigNumber] & {
        owners: string[];
        operators: string[];
        stakes: BigNumber[];
        blsPublicKeys: string[];
        candidates: boolean[];
        newCursor: BigNumber;
      }
    >;

    initialize(
      _environment: string,
      _allowlist: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    jail(
      owner_: string,
      operator: string,
      blsPublicKey: BytesLike,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    jailCallers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    joinValidator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    operatorToOwner(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    restakeCommissions(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    restakeRewards(
      validator: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    slash(
      operator: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakeUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakerSigners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string] & { signer: string }>;

    unstake(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstakeV2(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateBLSPublicKey(
      blsPublicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validatorOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        owner: string;
        operator: string;
        lastClaimCommission: BigNumber;
        blsPublicKey: string;
      }
    >;
  };

  activateValidator(
    validator: string,
    epochs: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addRewardBalance(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowlist(overrides?: CallOverrides): Promise<string>;

  blsPublicKeyToOwner(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  candidateManager(overrides?: CallOverrides): Promise<string>;

  claimCommissions(
    arg0: string,
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimLockedUnstake(
    lockedUnstake: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimRewards(
    arg0: string,
    validator: string,
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimUnstakes(
    arg0: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deactivateValidator(
    validator: string,
    epochs: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  environment(overrides?: CallOverrides): Promise<string>;

  getBlockAndSlashes(
    validator: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blocks: BigNumber; slashes: BigNumber }
  >;

  getCommissions(
    validator: string,
    epochs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockedUnstake(
    staker: string,
    lockedUnstake: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, boolean] & {
      token: number;
      amount: BigNumber;
      unlockTime: BigNumber;
      claimable: boolean;
    }
  >;

  getLockedUnstakeCount(
    staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLockedUnstakes(
    staker: string,
    cursor: BigNumberish,
    howMany: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number[], BigNumber[], BigNumber[], boolean[], BigNumber] & {
      tokens: number[];
      amounts: BigNumber[];
      unlockTimes: BigNumber[];
      claimable: boolean[];
      newCursor: BigNumber;
    }
  >;

  getOperatorStakes(
    operator: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRewards(
    staker: string,
    validator: string,
    epochs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakerStakes(
    staker: string,
    epoch: BigNumberish,
    cursor: BigNumberish,
    howMany: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber] & {
      _validators: string[];
      oasStakes: BigNumber[];
      woasStakes: BigNumber[];
      soasStakes: BigNumber[];
      newCursor: BigNumber;
    }
  >;

  getStakers(
    cursor: BigNumberish,
    howMany: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber] & { _stakers: string[]; newCursor: BigNumber }
  >;

  getTotalRewards(
    _validators: string[],
    epochs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotalStake(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUnstakes(
    staker: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      oasUnstakes: BigNumber;
      woasUnstakes: BigNumber;
      soasUnstakes: BigNumber;
    }
  >;

  getValidatorInfo(
    validator: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, boolean, boolean, BigNumber, string] & {
      operator: string;
      active: boolean;
      jailed: boolean;
      candidate: boolean;
      stakes: BigNumber;
      blsPublicKey: string;
    }
  >;

  getValidatorOwners(
    cursor: BigNumberish,
    howMany: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber] & { owners: string[]; newCursor: BigNumber }
  >;

  "getValidatorStakes(address,uint256)"(
    validator: string,
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getValidatorStakes(address,uint256,uint256,uint256)"(
    validator: string,
    epoch: BigNumberish,
    cursor: BigNumberish,
    howMany: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber] & {
      _stakers: string[];
      stakes: BigNumber[];
      newCursor: BigNumber;
    }
  >;

  getValidators(
    epoch: BigNumberish,
    cursor: BigNumberish,
    howMany: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], string[], BigNumber[], string[], boolean[], BigNumber] & {
      owners: string[];
      operators: string[];
      stakes: BigNumber[];
      blsPublicKeys: string[];
      candidates: boolean[];
      newCursor: BigNumber;
    }
  >;

  initialize(
    _environment: string,
    _allowlist: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  jail(
    owner_: string,
    operator: string,
    blsPublicKey: BytesLike,
    period: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  jailCallers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  joinValidator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  operatorToOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

  restakeCommissions(
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  restakeRewards(
    validator: string,
    epochs: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  slash(
    operator: string,
    blocks: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    validator: string,
    token: BigNumberish,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeAmounts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakeUpdates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakerSigners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  stakers(arg0: string, overrides?: CallOverrides): Promise<string>;

  unstake(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstakeV2(
    validator: string,
    token: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateBLSPublicKey(
    blsPublicKey: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateOperator(
    operator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validatorOwners(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  validators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, string] & {
      owner: string;
      operator: string;
      lastClaimCommission: BigNumber;
      blsPublicKey: string;
    }
  >;

  callStatic: {
    activateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardBalance(overrides?: CallOverrides): Promise<void>;

    allowlist(overrides?: CallOverrides): Promise<string>;

    blsPublicKeyToOwner(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    candidateManager(overrides?: CallOverrides): Promise<string>;

    claimCommissions(
      arg0: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimLockedUnstake(
      lockedUnstake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimRewards(
      arg0: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimUnstakes(arg0: string, overrides?: CallOverrides): Promise<void>;

    deactivateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    environment(overrides?: CallOverrides): Promise<string>;

    getBlockAndSlashes(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blocks: BigNumber; slashes: BigNumber }
    >;

    getCommissions(
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedUnstake(
      staker: string,
      lockedUnstake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, boolean] & {
        token: number;
        amount: BigNumber;
        unlockTime: BigNumber;
        claimable: boolean;
      }
    >;

    getLockedUnstakeCount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedUnstakes(
      staker: string,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number[], BigNumber[], BigNumber[], boolean[], BigNumber] & {
        tokens: number[];
        amounts: BigNumber[];
        unlockTimes: BigNumber[];
        claimable: boolean[];
        newCursor: BigNumber;
      }
    >;

    getOperatorStakes(
      operator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(
      staker: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerStakes(
      staker: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[], BigNumber[], BigNumber] & {
        _validators: string[];
        oasStakes: BigNumber[];
        woasStakes: BigNumber[];
        soasStakes: BigNumber[];
        newCursor: BigNumber;
      }
    >;

    getStakers(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { _stakers: string[]; newCursor: BigNumber }
    >;

    getTotalRewards(
      _validators: string[],
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStake(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakes(
      staker: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        oasUnstakes: BigNumber;
        woasUnstakes: BigNumber;
        soasUnstakes: BigNumber;
      }
    >;

    getValidatorInfo(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, boolean, boolean, BigNumber, string] & {
        operator: string;
        active: boolean;
        jailed: boolean;
        candidate: boolean;
        stakes: BigNumber;
        blsPublicKey: string;
      }
    >;

    getValidatorOwners(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber] & { owners: string[]; newCursor: BigNumber }
    >;

    "getValidatorStakes(address,uint256)"(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValidatorStakes(address,uint256,uint256,uint256)"(
      validator: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber] & {
        _stakers: string[];
        stakes: BigNumber[];
        newCursor: BigNumber;
      }
    >;

    getValidators(
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], string[], BigNumber[], string[], boolean[], BigNumber] & {
        owners: string[];
        operators: string[];
        stakes: BigNumber[];
        blsPublicKeys: string[];
        candidates: boolean[];
        newCursor: BigNumber;
      }
    >;

    initialize(
      _environment: string,
      _allowlist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    jail(
      owner_: string,
      operator: string,
      blsPublicKey: BytesLike,
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    jailCallers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    joinValidator(operator: string, overrides?: CallOverrides): Promise<void>;

    operatorToOwner(arg0: string, overrides?: CallOverrides): Promise<string>;

    restakeCommissions(
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    restakeRewards(
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slash(
      operator: string,
      blocks: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerSigners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stakers(arg0: string, overrides?: CallOverrides): Promise<string>;

    unstake(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeV2(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBLSPublicKey(
      blsPublicKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOperator(operator: string, overrides?: CallOverrides): Promise<void>;

    validatorOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, string] & {
        owner: string;
        operator: string;
        lastClaimCommission: BigNumber;
        blsPublicKey: string;
      }
    >;
  };

  filters: {
    "AddedRewardBalance(uint256)"(amount?: null): AddedRewardBalanceEventFilter;
    AddedRewardBalance(amount?: null): AddedRewardBalanceEventFilter;

    "BLSPublicKeyUpdated(address,bytes,bytes)"(
      validator?: string | null,
      oldBLSPublicKey?: null,
      newBLSPublicKey?: null
    ): BLSPublicKeyUpdatedEventFilter;
    BLSPublicKeyUpdated(
      validator?: string | null,
      oldBLSPublicKey?: null,
      newBLSPublicKey?: null
    ): BLSPublicKeyUpdatedEventFilter;

    "ClaimedCommissions(address,uint256)"(
      validator?: string | null,
      amount?: null
    ): ClaimedCommissionsEventFilter;
    ClaimedCommissions(
      validator?: string | null,
      amount?: null
    ): ClaimedCommissionsEventFilter;

    "ClaimedLockedUnstake(address,uint256)"(
      staker?: string | null,
      lockedUnstake?: null
    ): ClaimedLockedUnstakeEventFilter;
    ClaimedLockedUnstake(
      staker?: string | null,
      lockedUnstake?: null
    ): ClaimedLockedUnstakeEventFilter;

    "ClaimedRewards(address,address,uint256)"(
      staker?: string | null,
      validator?: null,
      amount?: null
    ): ClaimedRewardsEventFilter;
    ClaimedRewards(
      staker?: string | null,
      validator?: null,
      amount?: null
    ): ClaimedRewardsEventFilter;

    "OperatorUpdated(address,address,address)"(
      validator?: string | null,
      oldOperator?: null,
      newOperator?: null
    ): OperatorUpdatedEventFilter;
    OperatorUpdated(
      validator?: string | null,
      oldOperator?: null,
      newOperator?: null
    ): OperatorUpdatedEventFilter;

    "ReStaked(address,address,uint256)"(
      staker?: string | null,
      validator?: string | null,
      amount?: null
    ): ReStakedEventFilter;
    ReStaked(
      staker?: string | null,
      validator?: string | null,
      amount?: null
    ): ReStakedEventFilter;

    "Staked(address,address,uint8,uint256)"(
      staker?: string | null,
      validator?: string | null,
      token?: null,
      amount?: null
    ): StakedEventFilter;
    Staked(
      staker?: string | null,
      validator?: string | null,
      token?: null,
      amount?: null
    ): StakedEventFilter;

    "Unstaked(address,address,uint8,uint256)"(
      staker?: string | null,
      validator?: string | null,
      token?: null,
      amount?: null
    ): UnstakedEventFilter;
    Unstaked(
      staker?: string | null,
      validator?: string | null,
      token?: null,
      amount?: null
    ): UnstakedEventFilter;

    "UnstakedV2(address,address,uint256)"(
      staker?: string | null,
      validator?: string | null,
      lockedUnstake?: null
    ): UnstakedV2EventFilter;
    UnstakedV2(
      staker?: string | null,
      validator?: string | null,
      lockedUnstake?: null
    ): UnstakedV2EventFilter;

    "ValidatorActivated(address,uint256[])"(
      validator?: string | null,
      epochs?: null
    ): ValidatorActivatedEventFilter;
    ValidatorActivated(
      validator?: string | null,
      epochs?: null
    ): ValidatorActivatedEventFilter;

    "ValidatorDeactivated(address,uint256[])"(
      validator?: string | null,
      epochs?: null
    ): ValidatorDeactivatedEventFilter;
    ValidatorDeactivated(
      validator?: string | null,
      epochs?: null
    ): ValidatorDeactivatedEventFilter;

    "ValidatorJailed(address,uint256)"(
      validator?: string | null,
      until?: null
    ): ValidatorJailedEventFilter;
    ValidatorJailed(
      validator?: string | null,
      until?: null
    ): ValidatorJailedEventFilter;

    "ValidatorJoined(address)"(validator?: null): ValidatorJoinedEventFilter;
    ValidatorJoined(validator?: null): ValidatorJoinedEventFilter;

    "ValidatorSlashed(address)"(
      validator?: string | null
    ): ValidatorSlashedEventFilter;
    ValidatorSlashed(validator?: string | null): ValidatorSlashedEventFilter;
  };

  estimateGas: {
    activateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addRewardBalance(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    allowlist(overrides?: CallOverrides): Promise<BigNumber>;

    blsPublicKeyToOwner(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidateManager(overrides?: CallOverrides): Promise<BigNumber>;

    claimCommissions(
      arg0: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimLockedUnstake(
      lockedUnstake: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimRewards(
      arg0: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimUnstakes(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deactivateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    environment(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockAndSlashes(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCommissions(
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedUnstake(
      staker: string,
      lockedUnstake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedUnstakeCount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLockedUnstakes(
      staker: string,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOperatorStakes(
      operator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRewards(
      staker: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerStakes(
      staker: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakers(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalRewards(
      _validators: string[],
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalStake(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnstakes(staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorInfo(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorOwners(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValidatorStakes(address,uint256)"(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getValidatorStakes(address,uint256,uint256,uint256)"(
      validator: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidators(
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _environment: string,
      _allowlist: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    jail(
      owner_: string,
      operator: string,
      blsPublicKey: BytesLike,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    jailCallers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    joinValidator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    operatorToOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    restakeCommissions(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    restakeRewards(
      validator: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    slash(
      operator: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    stakeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakeUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerSigners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    unstake(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstakeV2(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateBLSPublicKey(
      blsPublicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validatorOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    activateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addRewardBalance(
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowlist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blsPublicKeyToOwner(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidateManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimCommissions(
      arg0: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimLockedUnstake(
      lockedUnstake: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      arg0: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimUnstakes(
      arg0: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deactivateValidator(
      validator: string,
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    environment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockAndSlashes(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCommissions(
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedUnstake(
      staker: string,
      lockedUnstake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedUnstakeCount(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLockedUnstakes(
      staker: string,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOperatorStakes(
      operator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRewards(
      staker: string,
      validator: string,
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakerStakes(
      staker: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakers(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalRewards(
      _validators: string[],
      epochs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalStake(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnstakes(
      staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorInfo(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorOwners(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValidatorStakes(address,uint256)"(
      validator: string,
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getValidatorStakes(address,uint256,uint256,uint256)"(
      validator: string,
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidators(
      epoch: BigNumberish,
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _environment: string,
      _allowlist: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jail(
      owner_: string,
      operator: string,
      blsPublicKey: BytesLike,
      period: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    jailCallers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinValidator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    operatorToOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    restakeCommissions(
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    restakeRewards(
      validator: string,
      epochs: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    slash(
      operator: string,
      blocks: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeAmounts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakeUpdates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakerSigners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstakeV2(
      validator: string,
      token: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateBLSPublicKey(
      blsPublicKey: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateOperator(
      operator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validatorOwners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
