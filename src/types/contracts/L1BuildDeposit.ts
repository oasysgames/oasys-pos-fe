/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface L1BuildDepositInterface extends utils.Interface {
  functions: {
    "agentAddress()": FunctionFragment;
    "allowedTokens(uint256)": FunctionFragment;
    "allowlistAddress()": FunctionFragment;
    "build(address)": FunctionFragment;
    "deposit(address)": FunctionFragment;
    "depositERC20(address,address,uint256)": FunctionFragment;
    "getBuildBlock(address)": FunctionFragment;
    "getDepositAmount(address,address)": FunctionFragment;
    "getDepositERC20Amount(address,address,address)": FunctionFragment;
    "getDepositTotal(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "lockedBlock()": FunctionFragment;
    "requiredAmount()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawERC20(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "agentAddress"
      | "allowedTokens"
      | "allowlistAddress"
      | "build"
      | "deposit"
      | "depositERC20"
      | "getBuildBlock"
      | "getDepositAmount"
      | "getDepositERC20Amount"
      | "getDepositTotal"
      | "initialize"
      | "lockedBlock"
      | "requiredAmount"
      | "withdraw"
      | "withdrawERC20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "agentAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowlistAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "build", values: [string]): string;
  encodeFunctionData(functionFragment: "deposit", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuildBlock",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositAmount",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositERC20Amount",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositTotal",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lockedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "agentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowlistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuildBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositERC20Amount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;

  events: {
    "Build(address,uint256)": EventFragment;
    "Deposit(address,address,address,uint256)": EventFragment;
    "Withdrawal(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Build"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface BuildEventObject {
  builder: string;
  block: BigNumber;
}
export type BuildEvent = TypedEvent<[string, BigNumber], BuildEventObject>;

export type BuildEventFilter = TypedEventFilter<BuildEvent>;

export interface DepositEventObject {
  builder: string;
  depositer: string;
  token: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawalEventObject {
  builder: string;
  depositer: string;
  token: string;
  amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface L1BuildDeposit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1BuildDepositInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    agentAddress(overrides?: CallOverrides): Promise<[string]>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowlistAddress(overrides?: CallOverrides): Promise<[string]>;

    build(
      _builder: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      _builder: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBuildBlock(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositAmount(
      _builder: string,
      _depositer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositERC20Amount(
      _builder: string,
      _depositer: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getDepositTotal(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _agentAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    lockedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    requiredAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _builder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  agentAddress(overrides?: CallOverrides): Promise<string>;

  allowedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allowlistAddress(overrides?: CallOverrides): Promise<string>;

  build(
    _builder: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    _builder: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositERC20(
    _builder: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBuildBlock(
    _builder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositAmount(
    _builder: string,
    _depositer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositERC20Amount(
    _builder: string,
    _depositer: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDepositTotal(
    _builder: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _agentAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  lockedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  requiredAmount(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _builder: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _builder: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    agentAddress(overrides?: CallOverrides): Promise<string>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    allowlistAddress(overrides?: CallOverrides): Promise<string>;

    build(_builder: string, overrides?: CallOverrides): Promise<void>;

    deposit(_builder: string, overrides?: CallOverrides): Promise<void>;

    depositERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBuildBlock(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositAmount(
      _builder: string,
      _depositer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositERC20Amount(
      _builder: string,
      _depositer: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositTotal(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(_agentAddress: string, overrides?: CallOverrides): Promise<void>;

    lockedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    requiredAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _builder: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Build(address,uint256)"(
      builder?: string | null,
      block?: null
    ): BuildEventFilter;
    Build(builder?: string | null, block?: null): BuildEventFilter;

    "Deposit(address,address,address,uint256)"(
      builder?: string | null,
      depositer?: null,
      token?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      builder?: string | null,
      depositer?: null,
      token?: null,
      amount?: null
    ): DepositEventFilter;

    "Withdrawal(address,address,address,uint256)"(
      builder?: string | null,
      depositer?: null,
      token?: null,
      amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      builder?: string | null,
      depositer?: null,
      token?: null,
      amount?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    agentAddress(overrides?: CallOverrides): Promise<BigNumber>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowlistAddress(overrides?: CallOverrides): Promise<BigNumber>;

    build(
      _builder: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      _builder: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    depositERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBuildBlock(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositAmount(
      _builder: string,
      _depositer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositERC20Amount(
      _builder: string,
      _depositer: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositTotal(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _agentAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    lockedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    requiredAmount(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _builder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    agentAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowlistAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    build(
      _builder: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      _builder: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBuildBlock(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositAmount(
      _builder: string,
      _depositer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositERC20Amount(
      _builder: string,
      _depositer: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositTotal(
      _builder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _agentAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    lockedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requiredAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _builder: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _builder: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
