/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IL1BuildAgent {
  export type BuildConfigStruct = {
    finalSystemOwner: string;
    l2OutputOracleProposer: string;
    l2OutputOracleChallenger: string;
    batchSenderAddress: string;
    p2pSequencerAddress: string;
    messageRelayer: string;
    l2BlockTime: BigNumberish;
    l2GasLimit: BigNumberish;
    l2OutputOracleSubmissionInterval: BigNumberish;
    finalizationPeriodSeconds: BigNumberish;
    l2OutputOracleStartingBlockNumber: BigNumberish;
    l2OutputOracleStartingTimestamp: BigNumberish;
  };

  export type BuildConfigStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    finalSystemOwner: string;
    l2OutputOracleProposer: string;
    l2OutputOracleChallenger: string;
    batchSenderAddress: string;
    p2pSequencerAddress: string;
    messageRelayer: string;
    l2BlockTime: BigNumber;
    l2GasLimit: BigNumber;
    l2OutputOracleSubmissionInterval: BigNumber;
    finalizationPeriodSeconds: BigNumber;
    l2OutputOracleStartingBlockNumber: BigNumber;
    l2OutputOracleStartingTimestamp: BigNumber;
  };
}

export interface L1BuildAgentInterface extends utils.Interface {
  functions: {
    "build(uint256,(address,address,address,address,address,address,uint256,uint64,uint256,uint256,uint256,uint256))": FunctionFragment;
    "getBuilderGlobally(uint256)": FunctionFragment;
    "builtLists(uint256)": FunctionFragment;
    "chainIds(uint256)": FunctionFragment;
    "depositAddress()": FunctionFragment;
    "getAddressManager(uint256)": FunctionFragment;
    "getBuilts(uint256,uint256)": FunctionFragment;
    "getNamedAddress(uint256,string)": FunctionFragment;
    "getNamedAddresses(uint256)": FunctionFragment;
    "setStep1Addresses(uint256,address,address,address,address,address)": FunctionFragment;
    "setStep2Addresses(uint256,address,address,address)": FunctionFragment;
    "setStep3Addresses(uint256,address,address,address,address)": FunctionFragment;
    "step1Address()": FunctionFragment;
    "step2Address()": FunctionFragment;
    "step3Address()": FunctionFragment;
    "step4Address()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "build"
      | "getBuilderGlobally"
      | "builtLists"
      | "chainIds"
      | "depositAddress"
      | "getAddressManager"
      | "getBuilts"
      | "getNamedAddress"
      | "getNamedAddresses"
      | "setStep1Addresses"
      | "setStep2Addresses"
      | "setStep3Addresses"
      | "step1Address"
      | "step2Address"
      | "step3Address"
      | "step4Address"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "build",
    values: [BigNumberish, IL1BuildAgent.BuildConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuilderGlobally",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "builtLists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressManager",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuilts",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNamedAddress",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNamedAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStep1Addresses",
    values: [BigNumberish, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStep2Addresses",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStep3Addresses",
    values: [BigNumberish, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "step1Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "step2Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "step3Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "step4Address",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuilderGlobally",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "builtLists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBuilts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNamedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNamedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStep1Addresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStep2Addresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStep3Addresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "step1Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "step2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "step3Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "step4Address",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(uint256,address,address,address[7],address[7],address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
}

export interface DeployedEventObject {
  chainId: BigNumber;
  owner: string;
  proxyAdmin: string;
  proxys: string[];
  impls: string[];
  batchInbox: string;
  addressManager: string;
}
export type DeployedEvent = TypedEvent<
  [BigNumber, string, string, string[], string[], string, string],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface L1BuildAgent extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1BuildAgentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    build(
      _chainId: BigNumberish,
      _cfg: IL1BuildAgent.BuildConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getBuilderGlobally(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    builtLists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        proxyAdmin: string;
        systemConfig: string;
        l1StandardBridge: string;
        l1ERC721Bridge: string;
        l1CrossDomainMessenger: string;
        oasysL2OutputOracle: string;
        oasysPortal: string;
        protocolVersions: string;
        batchInbox: string;
      }
    >;

    chainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositAddress(overrides?: CallOverrides): Promise<[string]>;

    getAddressManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBuilts(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber]>;

    getNamedAddress(
      _chainId: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNamedAddresses(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    setStep1Addresses(
      _chainId: BigNumberish,
      _addressManager: string,
      _sequencer: string,
      _proposer: string,
      _canonicalTransactionChain: string,
      _ctcBatches: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStep2Addresses(
      _chainId: BigNumberish,
      _stateCommitmentChain: string,
      _sccBatches: string,
      _bondManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setStep3Addresses(
      _chainId: BigNumberish,
      _l1CrossDomainMessenger: string,
      _l1CrossDomainMessengerProxy: string,
      _l1StandardBridgeProxy: string,
      _l1ERC721BridgeProxy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    step1Address(overrides?: CallOverrides): Promise<[string]>;

    step2Address(overrides?: CallOverrides): Promise<[string]>;

    step3Address(overrides?: CallOverrides): Promise<[string]>;

    step4Address(overrides?: CallOverrides): Promise<[string]>;
  };

  build(
    _chainId: BigNumberish,
    _cfg: IL1BuildAgent.BuildConfigStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getBuilderGlobally(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  builtLists(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, string, string] & {
      proxyAdmin: string;
      systemConfig: string;
      l1StandardBridge: string;
      l1ERC721Bridge: string;
      l1CrossDomainMessenger: string;
      oasysL2OutputOracle: string;
      oasysPortal: string;
      protocolVersions: string;
      batchInbox: string;
    }
  >;

  chainIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  depositAddress(overrides?: CallOverrides): Promise<string>;

  getAddressManager(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBuilts(
    cursor: BigNumberish,
    howMany: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], BigNumber]>;

  getNamedAddress(
    _chainId: BigNumberish,
    _name: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getNamedAddresses(
    _chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string[]]>;

  setStep1Addresses(
    _chainId: BigNumberish,
    _addressManager: string,
    _sequencer: string,
    _proposer: string,
    _canonicalTransactionChain: string,
    _ctcBatches: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStep2Addresses(
    _chainId: BigNumberish,
    _stateCommitmentChain: string,
    _sccBatches: string,
    _bondManager: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setStep3Addresses(
    _chainId: BigNumberish,
    _l1CrossDomainMessenger: string,
    _l1CrossDomainMessengerProxy: string,
    _l1StandardBridgeProxy: string,
    _l1ERC721BridgeProxy: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  step1Address(overrides?: CallOverrides): Promise<string>;

  step2Address(overrides?: CallOverrides): Promise<string>;

  step3Address(overrides?: CallOverrides): Promise<string>;

  step4Address(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    build(
      _chainId: BigNumberish,
      _cfg: IL1BuildAgent.BuildConfigStruct,
      overrides?: CallOverrides
    ): Promise<[string, string[], string[], string, string]>;

    getBuilderGlobally(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    builtLists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        proxyAdmin: string;
        systemConfig: string;
        l1StandardBridge: string;
        l1ERC721Bridge: string;
        l1CrossDomainMessenger: string;
        oasysL2OutputOracle: string;
        oasysPortal: string;
        protocolVersions: string;
        batchInbox: string;
      }
    >;

    chainIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositAddress(overrides?: CallOverrides): Promise<string>;

    getAddressManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBuilts(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber]>;

    getNamedAddress(
      _chainId: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getNamedAddresses(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string[]]>;

    setStep1Addresses(
      _chainId: BigNumberish,
      _addressManager: string,
      _sequencer: string,
      _proposer: string,
      _canonicalTransactionChain: string,
      _ctcBatches: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStep2Addresses(
      _chainId: BigNumberish,
      _stateCommitmentChain: string,
      _sccBatches: string,
      _bondManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStep3Addresses(
      _chainId: BigNumberish,
      _l1CrossDomainMessenger: string,
      _l1CrossDomainMessengerProxy: string,
      _l1StandardBridgeProxy: string,
      _l1ERC721BridgeProxy: string,
      overrides?: CallOverrides
    ): Promise<void>;

    step1Address(overrides?: CallOverrides): Promise<string>;

    step2Address(overrides?: CallOverrides): Promise<string>;

    step3Address(overrides?: CallOverrides): Promise<string>;

    step4Address(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Deployed(uint256,address,address,address[7],address[7],address,address)"(
      chainId?: BigNumberish | null,
      owner?: null,
      proxyAdmin?: null,
      proxys?: null,
      impls?: null,
      batchInbox?: null,
      addressManager?: null
    ): DeployedEventFilter;
    Deployed(
      chainId?: BigNumberish | null,
      owner?: null,
      proxyAdmin?: null,
      proxys?: null,
      impls?: null,
      batchInbox?: null,
      addressManager?: null
    ): DeployedEventFilter;
  };

  estimateGas: {
    build(
      _chainId: BigNumberish,
      _cfg: IL1BuildAgent.BuildConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getBuilderGlobally(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    builtLists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    depositAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getAddressManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuilts(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNamedAddress(
      _chainId: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNamedAddresses(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setStep1Addresses(
      _chainId: BigNumberish,
      _addressManager: string,
      _sequencer: string,
      _proposer: string,
      _canonicalTransactionChain: string,
      _ctcBatches: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStep2Addresses(
      _chainId: BigNumberish,
      _stateCommitmentChain: string,
      _sccBatches: string,
      _bondManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setStep3Addresses(
      _chainId: BigNumberish,
      _l1CrossDomainMessenger: string,
      _l1CrossDomainMessengerProxy: string,
      _l1StandardBridgeProxy: string,
      _l1ERC721BridgeProxy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    step1Address(overrides?: CallOverrides): Promise<BigNumber>;

    step2Address(overrides?: CallOverrides): Promise<BigNumber>;

    step3Address(overrides?: CallOverrides): Promise<BigNumber>;

    step4Address(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    build(
      _chainId: BigNumberish,
      _cfg: IL1BuildAgent.BuildConfigStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getBuilderGlobally(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    builtLists(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAddressManager(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuilts(
      cursor: BigNumberish,
      howMany: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNamedAddress(
      _chainId: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNamedAddresses(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setStep1Addresses(
      _chainId: BigNumberish,
      _addressManager: string,
      _sequencer: string,
      _proposer: string,
      _canonicalTransactionChain: string,
      _ctcBatches: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStep2Addresses(
      _chainId: BigNumberish,
      _stateCommitmentChain: string,
      _sccBatches: string,
      _bondManager: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setStep3Addresses(
      _chainId: BigNumberish,
      _l1CrossDomainMessenger: string,
      _l1CrossDomainMessengerProxy: string,
      _l1StandardBridgeProxy: string,
      _l1ERC721BridgeProxy: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    step1Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    step2Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    step3Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    step4Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
